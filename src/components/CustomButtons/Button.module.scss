@use "../../global_styles/abstract/colors" as *;
@import "../../global_styles/abstract/variables.scss";

.blob-btn {
    $numOfBlobs: 4;
    z-index: 1;
    position: absolute;
    padding: calc(0.4vw + 25px) calc(0.4vw + 75px);
    margin-top: 14em;
    text-align: center;
    text-transform: uppercase;
    font-weight: 500;
    font-size: calc(0.75vw + 0.9rem);
    outline: none;
    border: none;
    transition: color 0.3s;
    cursor: pointer;
    border-radius: $spacing-md;
    margin-left: calc(8.7vw + 2px);
  
    @include breakpoint(md) {
      margin-top: calc(11em + 10px);
    }
    
    &:active {
      transform: scale(0.98);
      border-radius: 0;
    }
    &:before {
      content: "";
      z-index: 1;
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      border: $borderW solid $bg3;
      border-radius:30px;
    }
  
    &:after {
      content: "";
      z-index: -2;
      position: absolute;
      left: $borderW*1.5;
      top: $borderW*1.5;
      width: 100%;
      height: 100%;
      transition: all 0.3s 0.2s;
      border-radius:30px;
    }
  
    &:hover {
      border-radius:30px;
  
      &:after {
        transition: all 0.3s;
        left: 0;
        top: 0;
        border-radius:30px;
      }
    }
  
    &__inner {
      z-index: -1;
      overflow: hidden;
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      border-radius:30px;
    }
  
    // additional container created, because in FF blobs are breaking overflow:hidden of element with svg gooey filter
    &__blobs {
      position: relative;
      display: block;
      height: 100%;
      filter: url('#goo');
    }
  
    &__blob {
      position: absolute;
      top: $borderW;
      width: calc(120% / $numOfBlobs);
      height: 100%;
      border-radius: 100%;
      transform: translate3d(0,150%,0) scale(1.7);
      transition: transform 0.45s;
   
      @supports(filter: url('#goo')) {
        transform: translate3d(0,150%,0) scale(1.4);
      }
  
      @for $i from 1 through $numOfBlobs {
        &:nth-child(#{$i}) {
          left: ($i - 1) * calc(120% / $numOfBlobs);
          transition-delay: ($i - 1) * 0.08s;
        }
      }
  
      .blob-btn:hover & {
        transform: translateZ(0) scale(1.7);
  
        @supports(filter: url('#goo')) {
          transform: translateZ(0) scale(1.4);
        }
      }
    }
  
    

    // Light mode styles
  &.light {
    color: $white;
  
    .blob-btn__inner {
      background-color: $pink; 
    }
    .blob-btn__blob {
      background-color: $white;
    }    
    &:hover {
       color: $pink;
      &:blob-btn__blob {
        background-color: $white; 
      }
    }
  }

  // Dark mode styles
  &.dark {
    color: $dark-purple;
    .blob-btn__inner {
      background-color: $white;
    }
    .blob-btn__blob {
      background-color: $dark-purple; 
    }
    &:hover {
       color: $white;
      &:blob-btn__blob {
        background-color: $dark-purple; 
      }
    }
  }

}
